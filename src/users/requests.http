### Create a new user
POST http://localhost:5001/api/auth/signup
Content-Type: application/json

{
  "email": "user2@example.com",
  "name": "John",
  "password": "StrongPassword123!"
}

###
@clientId = 880f9b05-bba6-48fd-9e40-a7a7b011fa47

### Login an admin user
# @name login
POST http://localhost:5001/api/auth/login
Content-Type: application/json

{
  "email": "admin@example.com",
  "password": "Pa$$sw0rd",
  "clientId": "{{clientId}}"
}


### Login a user
# @name login
POST http://localhost:5001/api/auth/login
Content-Type: application/json

{
  "email": "user@example.com",
  "password": "StrongPassword123!",
  "clientId": "{{clientId}}"
}

###

@accessToken = {{login.response.body.accessToken}}

@refreshToken = {{login.response.body.refreshToken}}

### Refresh user token
# @name refresh
POST http://localhost:5001/api/auth/refresh-token
Content-Type: application/json

{
  "refreshToken": "{{refreshToken}}",
  "clientId": "{{clientId}}"
}

###
@refreshedRefreshToken = {{refresh.response.body.refreshToken}}

### Get logged-in user details
GET http://localhost:5001/api/auth/current-user
Authorization: Bearer {{accessToken}}

### Logout a user
POST http://localhost:5001/api/auth/logout
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "refreshToken": "{{refreshedRefreshToken}}",
  "clientId": "{{clientId}}"
}

### Find a particular user by ID
GET http://localhost:5001/api/users/2
Authorization: Bearer {{accessToken}}

### Get all users with pagination
GET http://localhost:5001/api/users?offset=0&limit=10
Authorization: Bearer {{accessToken}}

### Update a user by ID 
PUT http://localhost:5001/api/users/1
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "name": "Joe",
  "nickname": "Johnny Bravo",
  "roles": ["USER"]
}

### Update a user's profile
PUT http://localhost:5001/api/users/2/profile
Authorization: Bearer {{accessToken}}
Content-Type: application/json

{
  "name": "John",
  "nickname": "Johnny Bravo"
}

### Delete a user by ID
DELETE http://localhost:5001/api/users/2
Authorization: Bearer {{accessToken}}